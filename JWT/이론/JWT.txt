JWT (JSON Web Token)


Token
 - 토큰 기반 인증은 모던 웹 서비스에서 많이 사용됨.
 - API 를 이용한 웹 서비스를 개발한다면 토큰을 사용하여 유저들의 인증작업을 처리하는 것이 가장 좋은 방법.
 
Toekn 기반 인증 시스템을 선택하는 여러가지 이유
 - Stateless 서버
	1) Stateful 서버란?
		: 클라이언트에게서 요청을 받을 때마다, 클라이언트의 상태를 계속해서 유지해야하고,
		이 정보를 서비스 제공에 이용한다.
		e.g) 세션을 유지하는 웹 서버
			여기서 이 세션은 서버 컴퓨터의 메모리에 담을 때도 있고, 데이터 베이스 시스템에 저장.
	2) Sateless  서버란?
		: 상태를 유지하지 않음.
		상태 정보를 저장하지 않으면 서버는 클라이언트측에서 들어오는 요청으로만 작업을 처리.
		이렇게 상태가 없는 경우 클라이언트와 서버의 연결고리가 없기 때문에
		서버의 확장성(Scalability) 이 높아짐.

- 모바일 어플리케이션에 적합하다.
	: 만약 Android / iOS 모바일 어플리케이션을 개발 한다면, 안전한 API 를 만들기 위해서는 
	쿠키같은 인증시스템은 이상적이지 않다. (쿠키 컨테이너를 사용해야한다).
	토큰 기반 인증을 도입한다면 더욱 간단하게 이 번거로움을 해결할 수 있다.

- 인증 정보를 다른 어플리케이션으로 전달.
	: 대표적인 예 OAuth
	페이스북/구글 같은 소셜 계정들을 이용하여 다른 웹서비스에서도 로그인할 수 있다.

- 보안
	: 토큰 기반 인증 시스템을 이용하여 어플리케이션의 보안을 높일 수 있다.
	이 토큰 기반 인증을 사용한다고 해서 무조건 해킹의 위험해서 벗어나는 것은 아님.
   
과거의 인증 방식
- 서버 기반 인증
	- 서버측에서 유저들의 정보를 기억하고 있어야 한다.
	- 이 세션을 유지하기 위해서는 여러가지 방법이 사용됨 (메모리 / 디스크 / 데이터베이스)
	- 문제점
		: 세션(유저가 인증을 할 때, 서버는 이 기록을 저장하는 것)
		대부분의 경우엔 메모리에 저장하지만 로그인 유저의 수가 늘어난다면 램이 과부화 됨.
		이를 피하기 위해 데이터베이스에 저장하는 방식도 있지만 이 또한 유저의 수가 많으면
		데이터 베이스의 성능에 무리.
		
		: 확장성
		서버의 확장이란, 단순히 서버의 사양을 업그레이드 하는 것이 아니라 더 많은 트래픽을
		감당하기 위하여 여러개의 프로세스를 돌리거나 여러대의 서버 컴퓨터를 추가하는 것을 의미.
		세션을 사용하면서 분산된 시스템을 설계하는 것은 매우 복잡함.
		
		CORS (Cross-Origin Resource Sharing)
		: 웹 어플리케이션에서 세션을 관리 할 때 자주 사용되는 쿠키는 단일 도메인 및 서브 도메인
		에서만 작동하도록 되어 있음. 따라서 쿠키를 여러 도메인에서 관리하는 것은 번거로움.


토큰 기반 시스템의 작동 원리
- 토큰 기반 시스템은 stateless.
- 무상태, 상태를 유지하지 않는다. 더 이상 유저의 인증 정보를 서버나 세션에 담아 두지 않는다.
- 대략적인 과정
	1) 유저가 아이디와 비밀번호로 로그인
	2) 서버측에서 해당 계정 정보를 검증
	3) 계정정보가 정확하다면, 서버측에서 유저에게 signed 토큰을 발급.
		(signed : 해당 토큰이 서버에서 정상적으로 발급된 토큰임을 증명하는 signature를 가지고 있음)
	4) 클라이언트 측에서 전달받은 토큰을 저장해두고, 서버에 요청을 할 때 마다, 토큰을 함께 서버에 전달.
	5) 서버는 토큰을 검증하고, 요청에 응답.
	* 웹서버에서 토큰을 서버에 전달 할 때는 HTTP 요청의 헤더에 토큰값을 포함시켜 전달.

토큰의 장점
- 무상태 이며 확장성(Scalability)이 있다
- 보안성
	: 클라이언트가 서버에 요청을 보낼 때, 더 이상 쿠키를 전달하지 않으므로 쿠키를 사용함으로써
	발생되는 취약점이 사라진다.
	하지만 토큰을 사용하는 환경에서도 취약점이 존재할 수 있으니 언제나 취약점에 대비해야 한다.
-확장성(Extensibility)
	: Scalability와 또 다른 개념.
	Scalability는 서버를 확장하는 것을 의미,
	Extensibility는 로그인 정보가 사용되는 분야를 확장하는 것을 의미.
	토큰을 사용하여 다른 서비스에서도 권한을 공유할 수 있음.
	다른 어플리케이션에서 Google 계정으로 로그인 할 수 있는 것.
	토큰 기반 시스템에서는 토큰에 선택적인 권한만 부여하여 발급을 할 수 있다.
	
- 여러 플랫폼 및 도메인
	: 토큰을 사용한다면 그 어떤 디바이스에서도 그 어떤 도메인에서도 토큰만 유효하다면 요청이 정상적으로
	처리가 된다.
	서버측 어플리케이션의 응답부분에 다음 헤더만 포함시켜주면된다.
				Access-Control-Allow-Origin: *
	이런 구조라면, assets 파일들(이미지, css, js, html 파일 등)은 모두 CDN에서 제공을 하도록 하고,
	서버측에서는 오직 API 만 다루도록 설계할 수 있다.

- 웹 표준 기반
	: JWT는 웹 표준 RFC 7519에 등록되어 있다.
	따라서 여러 환경에서 지원이 되며(.NET, Ruby, Java, Node.js, Python. PHP) 수 많은 회사의
	인프라스트럭쳐에서 사용되고 있다.
